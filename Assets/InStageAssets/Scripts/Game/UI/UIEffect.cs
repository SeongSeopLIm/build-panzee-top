using DG.Tweening;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using WAK.AutoGenerated;
using WAK.Managers;


namespace WAK
{

    public class UIEffect : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerClickHandler
    {
        [System.Serializable]
        private class ScaleEffectData
        {
            public float FocusScale = 1.1f;
            public float Duration = 0.15f;
            public Ease Ease = Ease.OutQuad;
        }

        [System.Serializable]
        private class SoundEffectData
        {
            // TODO : AudioClipType 를 받되, 에디터 스크립트 추가해서 인스펙터에서 enum지정하도록. 프리팹 저장은 string으로 되도록.
            public string HoverSFXKey;
            public string InteractSFXKey;
        }

        [SerializeField] private bool scaleEffect = true;
        // TODO : scaleEffect에 다른 인스펙터 노출 토글 적용
        [SerializeField] private ScaleEffectData scaleEffectData;


        [SerializeField] private bool soundEffect = true;
        [SerializeField] private SoundEffectData soundEffectData;

        private Selectable selectable;

        private void OnValidate()
        {
            if(!gameObject.TryGetComponent<Selectable>(out selectable))
            {
                Debug.LogWarning("Selectable 찾을 수 없음.");
            }
        }
        private void OnEnable()
        {
            transform.localScale = Vector3.one;
        }

        public void OnPointerEnter(PointerEventData eventData)
        {
            if(scaleEffect)
            {
                DOTween.Kill(GetInstanceID());
                transform.DOScale(scaleEffectData.FocusScale, scaleEffectData.Duration)
                    .SetId(GetInstanceID());
            }

            if(soundEffect)
            {
                if(Enum.TryParse<AudioClipType>(soundEffectData.HoverSFXKey, out var clipType))
                {
                    AudioManager.Instance.PlaySFX(clipType);
                }
                else
                {
                    Debug.LogError($"{soundEffectData.HoverSFXKey}를 찾을 수 없습니다.");
                } 
            }
        }

        public void OnPointerExit(PointerEventData eventData)
        {
            if (scaleEffect)
            {
                DOTween.Kill(GetInstanceID());
                transform.DOScale(1, scaleEffectData.Duration)
                    .SetId(GetInstanceID());
            }
        }

        public void OnPointerClick(PointerEventData eventData)
        {
            if (soundEffect)
            {
                if (Enum.TryParse<AudioClipType>(soundEffectData.InteractSFXKey, out var clipType))
                {
                    AudioManager.Instance.PlaySFX(clipType);
                }
                else
                {
                    Debug.LogError($"{soundEffectData.HoverSFXKey}를 찾을 수 없습니다.");
                } 
            }
        }
    }

}
