using System;
using System.Collections.Generic;
using UnityEngine;
using UnityCommunity.UnitySingleton;
using Cysharp.Threading.Tasks;
using Unity.VisualScripting;
using WAK.AutoGenerated;

namespace WAK.Managers
{
    public class AudioManager : MonoSingleton<AudioManager>
    {
        private AudioListener audioListener;
        private AudioSource BGMSource;
        public float BGMVolume => BGMSource.volume;
        public float SFXVolume { get; private set; } = 1f;

        private Queue<AudioSource> sfxPool = new Queue<AudioSource>();
        private int poolSize = 50; 

        protected override void OnInitialized()
        {
            base.OnInitialized();

            if (!audioListener)
            {
                audioListener = this.AddComponent<AudioListener>();
            }
            if (!BGMSource)
            {
                BGMSource = this.AddComponent<AudioSource>();
                BGMSource.volume = 1;
            }
             
            for (int i = 0; i < poolSize; i++)
            {
                GameObject sfxObj = new GameObject("SFXSource_" + i);
                sfxObj.transform.SetParent(this.transform);
                AudioSource sfxSource = sfxObj.AddComponent<AudioSource>();
                sfxSource.playOnAwake = false;
                sfxSource.volume = SFXVolume;
                sfxPool.Enqueue(sfxSource);
            }
        }

        public void SetBGMVolume(float volume)
        {
            if (!BGMSource)
            {
                BGMSource = this.AddComponent<AudioSource>();
            }
            BGMSource.volume = volume;
        }

        public void SetSFXVolume(float volume)
        {
            SFXVolume = volume; 
            foreach (var sfxSource in sfxPool)
            {
                sfxSource.volume = SFXVolume;
            }
        }

        public void PlayBGM(AudioClipType bgmType)
        {
            if (!bgmType.ToString().StartsWith("BGM_"))
            {
                Debug.LogError($"지정된 AudioType '{bgmType}'은 BGM이 아닙니다.");
                return;
            }

            string bgmKey = bgmType.ToString().Substring(4); // "BGM_" 제거
            string path = $"Audio/BGM/{bgmKey}";

            AudioClip bgmClip = Resources.Load<AudioClip>(path);

            if (!bgmClip)
            {
                Debug.LogError($"Resources에서 경로 '{path}'로 BGM을 찾을 수 없습니다.");
                return;
            } 
            if (BGMSource.clip == bgmClip)
            {
                Debug.Log("같은 음악 재생 무시처리");
                return;
            }
            BGMSource.clip = bgmClip;
            BGMSource.loop = true; // BGM은 반복 재생
            BGMSource.Play();
        }

        public void PlaySFX(AudioClipType sfxType)
        {
            if (!sfxType.ToString().StartsWith("SFX_"))
            {
                Debug.LogError($"지정된 AudioType '{sfxType}'은 SFX가 아닙니다.");
                return;
            }

            if (sfxPool.Count > 0)
            {
                AudioSource sfxSource = sfxPool.Dequeue();
                sfxSource.gameObject.SetActive(true);

                string sfxKey = sfxType.ToString().Substring(4); // "SFX_" 제거
                string path = $"Audio/SFX/{sfxKey}";

                AudioClip sfxClip = Resources.Load<AudioClip>(path);

                if (sfxClip != null)
                {
                    sfxSource.clip = sfxClip;
                    sfxSource.volume = SFXVolume;
                    sfxSource.Play();

                    ReturnSFXToPoolAsync(sfxSource, sfxClip.length).Forget();
                }
                else
                {
                    Debug.LogError($"Resources에서 경로 '{path}'로 SFX를 찾을 수 없습니다.");
                    sfxPool.Enqueue(sfxSource);
                    sfxSource.gameObject.SetActive(false);
                }
            }
            else
            {
                Debug.LogWarning("SFX AudioSource 풀에 사용 가능한 오브젝트가 없습니다.");
            }
        }

        private async UniTaskVoid ReturnSFXToPoolAsync(AudioSource sfxSource, float delay)
        {
            await UniTask.Delay(TimeSpan.FromSeconds(delay));
            sfxSource.clip = null;
            sfxPool.Enqueue(sfxSource);
            sfxSource.gameObject.SetActive(false);
        } 
    }
}
